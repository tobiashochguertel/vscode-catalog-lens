name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

  workflow_dispatch:
    inputs:
      package_manager:
        description: 'Package manager to use (npm, yarn, pnpm, bun)'
        required: false
        default: pnpm
        type: choice
        options:
          - npm
          - yarn
          - pnpm
          - bun

env:
  PM_TOOL: ${{ github.event.inputs.package_manager || 'pnpm' }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Set node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-v2-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Generate metadata
        run: pnpm exec vscode-ext-gen --output src/generated/meta.ts --scope pnpmCatalogLens

      - name: Lint
        run: pnpm lint

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Set node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-v2-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Generate metadata
        run: pnpm exec vscode-ext-gen --output src/generated/meta.ts --scope pnpmCatalogLens

      - name: Typecheck
        run: pnpm typecheck

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Set node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-v2-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Generate metadata
        run: pnpm exec vscode-ext-gen --output src/generated/meta.ts --scope pnpmCatalogLens

      - name: Build
        run: pnpm build

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

  test:
    runs-on: ${{ matrix.os }}
    needs: [build]

    strategy:
      matrix:
        node: [lts/*]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      # Install pnpm only on Unix (skip Windows)
      - name: Install pnpm
        if: runner.os != 'Windows'
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Set node version to ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          # Use npm cache on Windows, pnpm on Unix
          cache: ${{ runner.os == 'Windows' && 'npm' || 'pnpm' }}

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-v2-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Install using npm on Windows, pnpm on Unix
      - name: Install (Unix - pnpm)
        if: steps.cache-node-modules.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: pnpm install --frozen-lockfile

      - name: Install (Windows - npm)
        if: steps.cache-node-modules.outputs.cache-hit != 'true' && runner.os == 'Windows'
        run: npm ci

      # Generate metadata using appropriate package manager
      - name: Generate metadata (Unix)
        if: runner.os != 'Windows'
        run: pnpm exec vscode-ext-gen --output src/generated/meta.ts --scope pnpmCatalogLens

      - name: Generate metadata (Windows)
        if: runner.os == 'Windows'
        run: npx vscode-ext-gen --output src/generated/meta.ts --scope pnpmCatalogLens

      - name: Restore build output
        id: cache-build
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

      # Build using appropriate package manager (if cache miss)
      - name: Build (Unix - if cache miss)
        if: steps.cache-build.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      - name: Build (Windows - if cache miss)
        if: steps.cache-build.outputs.cache-hit != 'true' && runner.os == 'Windows'
        run: |
          npm ci
          npm run build

      # Run tests using appropriate package manager
      - name: Unit Tests (Unix)
        if: runner.os != 'Windows'
        run: pnpm test:unit

      - name: Unit Tests (Windows)
        if: runner.os == 'Windows'
        run: npm run test:unit

  e2e:
    runs-on: ${{ matrix.os }}
    needs: [lint, typecheck, test]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [lts/*]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      # Install pnpm only on Unix (skip Windows)
      - name: Install pnpm
        if: runner.os != 'Windows'
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Set node version to ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          # Use npm cache on Windows, pnpm on Unix
          cache: ${{ runner.os == 'Windows' && 'npm' || 'pnpm' }}

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-v2-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Install using npm on Windows, pnpm on Unix
      - name: Install dependencies (Unix - pnpm)
        if: steps.cache-node-modules.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: pnpm install --frozen-lockfile

      - name: Install dependencies (Windows - npm)
        if: steps.cache-node-modules.outputs.cache-hit != 'true' && runner.os == 'Windows'
        run: npm ci

      # Generate metadata using appropriate package manager
      - name: Generate metadata (Unix)
        if: runner.os != 'Windows'
        run: pnpm exec vscode-ext-gen --output src/generated/meta.ts --scope pnpmCatalogLens

      - name: Generate metadata (Windows)
        if: runner.os == 'Windows'
        run: npx vscode-ext-gen --output src/generated/meta.ts --scope pnpmCatalogLens

      - name: Restore build output
        id: cache-build
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

      # Build using appropriate package manager (if cache miss)
      - name: Build (Unix - if cache miss)
        if: steps.cache-build.outputs.cache-hit != 'true' && runner.os != 'Windows'
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      - name: Build (Windows - if cache miss)
        if: steps.cache-build.outputs.cache-hit != 'true' && runner.os == 'Windows'
        run: |
          npm ci
          npm run build

      # Run E2E tests using appropriate package manager
      - name: Run E2E Tests (Unix)
        if: runner.os != 'Windows'
        run: pnpm test:e2e

      - name: Run E2E Tests (Windows)
        if: runner.os == 'Windows'
        run: npm run test:e2e
