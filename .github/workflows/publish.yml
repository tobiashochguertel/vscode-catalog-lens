name: Publish Extension

on:
  # Manual trigger - click "Run workflow" button on GitHub Actions tab
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode: simulate (test without publishing) or real (actually publish)'
        required: true
        type: choice
        options:
          - simulate
          - real
        default: simulate
      version_increment:
        description: Version increment type
        required: true
        type: choice
        options:
          - none
          - patch
          - minor
          - major
        default: none
      publish_marketplace:
        description: Publish to VS Code Marketplace
        required: true
        type: boolean
        default: true
      publish_openvsx:
        description: Publish to Open VSX
        required: true
        type: boolean
        default: true
      create_release:
        description: Create GitHub Release
        required: true
        type: boolean
        default: true
      skip_changelog:
        description: Skip changelog generation
        required: false
        type: boolean
        default: false

  # Automatic trigger on version tags
  push:
    tags:
      - 'v*'

env:
  PRETTIER_EXPERIMENTAL_CLI: 1

jobs:
  prepare-release:
    name: Prepare Release (Changelog & Version Bump)
    runs-on: ubuntu-latest
    # Only run for manual workflow dispatch (not for tag pushes)
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      changelog_updated: ${{ steps.generate_changelog.outputs.changelog_updated }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate Changelog
        id: generate_changelog
        if: github.event.inputs.skip_changelog != 'true'
        run: |
          echo "Generating changelog..."
          pnpm changelog

          if git diff --quiet CHANGELOG.md; then
            echo "No changelog changes detected"
            echo "changelog_updated=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changelog updated successfully"
            echo "changelog_updated=true" >> "$GITHUB_OUTPUT"
            git add CHANGELOG.md
            git commit -m "chore: update changelog"
          fi

      - name: Bump Version
        id: bump_version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Determine version increment
          INCREMENT="${{ github.event.inputs.version_increment }}"
          echo "Version increment: $INCREMENT"

          if [ "$INCREMENT" = "none" ]; then
            echo "Skipping version bump (using existing version: $CURRENT_VERSION)"
            echo "new_version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          else
            # Bump version using bumpp
            pnpm release --$INCREMENT --no-push --no-tag --no-commit -y

            # Get new version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "New version: $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

            # Commit version bump
            git add package.json pnpm-lock.yaml
            git commit -m "chore(release): bump version to $NEW_VERSION"
          fi

      - name: Create Tag
        id: create_tag
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          git tag "v$NEW_VERSION"
          echo "Created tag: v$NEW_VERSION"

      - name: Push Changes
        if: github.event.inputs.mode != 'simulate'
        run: |
          echo "🚀 Pushing changes to main branch..."
          git push origin main
          git push origin --tags
          echo "✅ Changes pushed successfully"

      - name: Simulate Push (Dry Run)
        if: github.event.inputs.mode == 'simulate'
        run: |
          echo "🔍 SIMULATION MODE: Would push the following changes:"
          echo ""
          echo "📝 Commits to push:"
          git log origin/main..HEAD --oneline
          echo ""
          echo "🏷️ Tags to push:"
          git tag --points-at HEAD
          echo ""
          echo "⚠️ Skipping actual push (simulation mode)"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: always() && (needs.prepare-release.result == 'success' || needs.prepare-release.result == 'skipped')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch latest changes from main (including changelog/version updates from prepare-release)
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}
          fetch-depth: 0

      - name: Pull Latest Changes
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode != 'simulate'
        run: |
          echo "📥 Pulling latest changes from main (including changelog/version updates)..."
          git pull origin main
          echo "✅ Up to date with main"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # Removed version - uses packageManager from package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [prepare-release, test]
    if: always() && needs.test.result == 'success'
    outputs:
      version: ${{ steps.package_info.outputs.version }}
      vsix_file: ${{ steps.package_info.outputs.vsix_file }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch latest changes from main (including changelog/version updates from prepare-release)
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}
          fetch-depth: 0

      - name: Pull Latest Changes
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode != 'simulate'
        run: |
          echo "📥 Pulling latest changes from main (including changelog/version updates)..."
          git pull origin main
          echo "✅ Up to date with main"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # Removed version - uses packageManager from package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Package
        run: pnpm package

      - name: Get package info
        id: package_info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          VSIX_FILE="catalog-lens-${VERSION}.vsix"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "vsix_file=${VSIX_FILE}" >> "$GITHUB_OUTPUT"

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package
          path: '*.vsix'
          retention-days: 7

  publish-marketplace:
    name: Publish to VS Code Marketplace
    runs-on: ubuntu-latest
    needs: build
    if: |
      ((github.event_name == 'workflow_dispatch' && github.event.inputs.publish_marketplace == 'true' && github.event.inputs.mode == 'real') ||
       github.event_name == 'push')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch latest changes from main (including changelog/version updates from prepare-release)
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}
          fetch-depth: 0

      - name: Pull Latest Changes
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "📥 Pulling latest changes from main (including changelog/version updates)..."
          git pull origin main
          echo "✅ Up to date with main"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # Removed version - uses packageManager from package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Publish to Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: pnpm ext:publish

  publish-openvsx:
    name: Publish to Open VSX
    runs-on: ubuntu-latest
    needs: build
    if: |
      ((github.event_name == 'workflow_dispatch' && github.event.inputs.publish_openvsx == 'true' && github.event.inputs.mode == 'real') ||
       github.event_name == 'push')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download VSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: vsix-package

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Publish to Open VSX
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
        run: |
          npx ovsx publish "${{ needs.build.outputs.vsix_file }}" -p "$OVSX_PAT"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, publish-marketplace, publish-openvsx]
    if: |
      always() &&
      needs.build.result == 'success' &&
      (needs.publish-marketplace.result == 'success' || needs.publish-marketplace.result == 'skipped') &&
      (needs.publish-openvsx.result == 'success' || needs.publish-openvsx.result == 'skipped') &&
      ((github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' && github.event.inputs.mode == 'real') ||
       github.event_name == 'push')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch latest changes from main (including changelog/version updates from prepare-release)
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}
          fetch-depth: 0

      - name: Pull Latest Changes
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "📥 Pulling latest changes from main (including changelog/version updates)..."
          git pull origin main
          echo "✅ Up to date with main"

      - name: Download VSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: vsix-package

      - name: Extract Release Notes from CHANGELOG
        id: changelog
        run: |
          VERSION="${{ needs.build.outputs.version }}"

          # Extract the section for this version from CHANGELOG.md
          if grep -q "^## \[${VERSION}\]" CHANGELOG.md; then
            # Extract version section, stopping at next version header
            sed -n "/^## \[${VERSION}\]/,/^## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
          else
            # Fallback: generate generic changelog
            {
              echo "## Changes in v${VERSION}"
              echo ""
              echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
            } > release_notes.md
          fi

          cat release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ needs.build.outputs.version }}
          tag_name: v${{ needs.build.outputs.version }}
          body_path: release_notes.md
          files: ${{ needs.build.outputs.vsix_file }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  simulation-summary:
    name: Simulation Summary
    runs-on: ubuntu-latest
    needs: [prepare-release, test, build]
    if: |
      always() &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.mode == 'simulate'
    steps:
      - name: Display Simulation Results
        run: |
          echo "🔍 ============================================"
          echo "🔍 SIMULATION MODE - SUMMARY"
          echo "🔍 ============================================"
          echo ""
          echo "✅ Completed Steps:"
          echo "  - Changelog generation: ${{ needs.prepare-release.outputs.changelog_updated == 'true' && '✅ Updated' || '⏭️ Skipped' }}"
          echo "  - Version bump: ${{ github.event.inputs.version_increment != 'none' && '✅ Bumped' || '⏭️ Skipped' }}"
          echo "  - Tests: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "  - Build & Package: ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }}"
          echo ""
          echo "⏭️ Skipped Steps (Simulation Mode):"
          echo "  - Push changes to main branch"
          echo "  - Push tags to repository"
          echo "  - Publish to VS Code Marketplace"
          echo "  - Publish to Open VSX"
          echo "  - Create GitHub Release"
          echo ""
          echo "📦 Package Information:"
          echo "  - Version: ${{ needs.build.outputs.version }}"
          echo "  - VSIX File: ${{ needs.build.outputs.vsix_file }}"
          echo ""
          echo "💡 To actually publish, run again with mode='real'"
          echo ""
          echo "🔍 ============================================"
