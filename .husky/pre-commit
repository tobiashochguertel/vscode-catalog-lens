#!/usr/bin/env sh

# Modern Husky v9 - no need to source husky.sh anymore

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

printf "${BLUE}🔍 Running pre-commit checks...${NC}\n"
printf "\n"

# STEP 1: Format code with Prettier
printf "${BLUE}✨ Step 1/7: Formatting code with Prettier...${NC}\n"
pnpm format > /dev/null 2>&1

if [ $? -ne 0 ]; then
  printf "\n"
  printf "${RED}❌ Prettier formatting failed!${NC}\n"
  printf "${YELLOW}💡 Run 'pnpm format' to see errors.${NC}\n"
  exit 1
fi

printf "${GREEN}✓ Prettier formatting completed${NC}\n"
git add -u

# STEP 2: Lint and fix markdown
printf "\n"
printf "${BLUE}📝 Step 2/7: Linting markdown files...${NC}\n"
pnpm markdown:fix > /dev/null 2>&1

if [ $? -ne 0 ]; then
  printf "\n"
  printf "${YELLOW}⚠️  Markdown linting found issues (attempting fix)${NC}\n"
  pnpm markdown:fix
fi

printf "${GREEN}✓ Markdown linting completed${NC}\n"
git add -u

# STEP 3: Auto-fix linting issues
printf "\n"
printf "${BLUE}� Step 3/7: Linting and auto-fixing...${NC}\n"
pnpm lint:fix

# Check if auto-fix worked
if [ $? -ne 0 ]; then
  printf "\n"
  printf "${RED}❌ Lint auto-fix couldn't resolve all issues!${NC}\n"
  printf "${YELLOW}💡 Please fix the remaining errors manually.${NC}\n"
  printf "${YELLOW}💡 Run 'pnpm lint' to see all errors.${NC}\n"
  exit 1
fi

# Re-add auto-fixed files to staging
printf "${GREEN}✓ Auto-fix completed${NC}\n"
printf "${BLUE}📦 Re-staging auto-fixed files...${NC}\n"
git add -u

# STEP 4: Verify no lint errors remain
printf "\n"
printf "${BLUE}📋 Step 4/7: Verifying lint status...${NC}\n"
pnpm lint

if [ $? -ne 0 ]; then
  printf "\n"
  printf "${RED}❌ Lint errors still exist after auto-fix!${NC}\n"
  printf "${YELLOW}💡 Some issues require manual fixes.${NC}\n"
  printf "${YELLOW}💡 Please review and fix the errors above.${NC}\n"
  exit 1
fi

printf "${GREEN}✓ No lint errors${NC}\n"

# STEP 5: Type checking
printf "\n"
printf "${BLUE}� Step 5/7: Type checking...${NC}\n"
pnpm typecheck

if [ $? -ne 0 ]; then
  printf "\n"
  printf "${RED}❌ Type check failed!${NC}\n"
  printf "${YELLOW}💡 Fix type errors before committing.${NC}\n"
  exit 1
fi

printf "${GREEN}✓ Type check passed${NC}\n"

# STEP 6: Build
printf "\n"
printf "${BLUE}🏗️  Step 6/7: Building...${NC}\n"
pnpm build > /dev/null 2>&1

if [ $? -ne 0 ]; then
  printf "\n"
  printf "${RED}❌ Build failed!${NC}\n"
  printf "${YELLOW}💡 Run 'pnpm build' to see build errors.${NC}\n"
  exit 1
fi

printf "${GREEN}✓ Build successful${NC}\n"

# STEP 7: Validate GitHub Actions workflows (if actionlint is available)
printf "\n"
printf "${BLUE}⚙️  Step 7/7: Validating GitHub Actions workflows...${NC}\n"

if command -v actionlint > /dev/null 2>&1; then
  if ./scripts/lint-workflows.sh > /dev/null 2>&1; then
    printf "${GREEN}✓ Workflow validation passed${NC}\n"
  else
    printf "\n"
    printf "${YELLOW}⚠️  Workflow validation found issues (non-blocking):${NC}\n"
    ./scripts/lint-workflows.sh
    printf "\n"
    printf "${YELLOW}💡 Fix workflow errors when convenient.${NC}\n"
    printf "${YELLOW}💡 Run 'pnpm workflow:lint' to see details.${NC}\n"
  fi
else
  printf "${YELLOW}⚠️  actionlint not installed (skipping)${NC}\n"
  printf "${YELLOW}💡 Install with: brew install actionlint${NC}\n"
fi

printf "\n"
printf "${GREEN}✅ All pre-commit checks passed!${NC}\n"
printf "\n"
