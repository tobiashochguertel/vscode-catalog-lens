#!/usr/bin/env bash

# Modern Husky v9 - no need to source husky.sh anymore

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}üîç Running pre-commit checks...${NC}"
echo

# STEP 1: Format code with Prettier
echo "${BLUE}‚ú® Step 1/7: Formatting code with Prettier...${NC}"

# First, check which files need formatting
echo "${BLUE}   Checking which files need formatting...${NC}"
FORMAT_CHECK_OUTPUT=$(pnpm format:check 2>&1)
FORMAT_CHECK_EXIT=$?

if [ $FORMAT_CHECK_EXIT -ne 0 ]; then
  echo "${YELLOW}   Files need formatting, auto-fixing...${NC}"
  echo

  # Show which files need formatting
  echo "$FORMAT_CHECK_OUTPUT" | grep -E "\[warn\]|\.md$|\.ts$|\.js$|\.json$" || true
  echo

  # Try to auto-fix
  echo "${BLUE}   Running prettier --write to auto-fix...${NC}"
  FORMAT_OUTPUT=$(pnpm format 2>&1)
  FORMAT_EXIT=$?

  if [ $FORMAT_EXIT -ne 0 ]; then
    echo
    echo "${RED}‚ùå Prettier formatting failed!${NC}"
    echo "${YELLOW}üí° Error details:${NC}"
    echo "$FORMAT_OUTPUT"
    echo
    echo "${YELLOW}üí° Possible causes:${NC}"
    echo "   - Syntax errors in files"
    echo "   - Files that Prettier can't parse"
    echo "   - Prettier configuration issues"
    echo
    echo "${YELLOW}üí° To fix:${NC}"
    echo "   1. Review the error messages above"
    echo "   2. Fix syntax errors manually"
    echo "   3. Run 'pnpm format' to verify"
    exit 1
  fi

  # Show which files were formatted
  echo "$FORMAT_OUTPUT" | grep -v "^>.*catalog-lens" | grep -v "^>.*prettier" | grep -E "\.md$|\.ts$|\.js$|\.json$" || true
  echo "${GREEN}‚úì Files auto-formatted successfully${NC}"
  git add -u
else
  echo "${GREEN}‚úì All files already formatted${NC}"
fi

# STEP 2: Lint and fix markdown
echo
echo "${BLUE}üìù Step 2/7: Linting markdown files...${NC}"

MARKDOWN_OUTPUT=$(pnpm markdown:fix 2>&1)
MARKDOWN_EXIT=$?

if [ $MARKDOWN_EXIT -ne 0 ]; then
  echo "${YELLOW}‚ö†Ô∏è  Markdown linting found issues${NC}"
  echo "$MARKDOWN_OUTPUT" | grep -E "error|warning|\.md:" || true
  echo
  echo "${YELLOW}üí° Some markdown issues may need manual fixes${NC}"
  # Don't fail on markdown errors, just warn
else
  echo "${GREEN}‚úì Markdown linting passed${NC}"
fi

git add -u

# STEP 3: Auto-fix linting issues
echo
echo "${BLUE}‚ú® Step 3/7: Linting and auto-fixing...${NC}"
pnpm lint:fix

# Check if auto-fix worked
if [ $? -ne 0 ]; then
  echo
  echo "${RED}‚ùå Lint auto-fix couldn't resolve all issues!${NC}"
  echo "${YELLOW}üí° Please fix the remaining errors manually.${NC}"
  echo "${YELLOW}üí° Run 'pnpm lint' to see all errors.${NC}"
  exit 1
fi

# Re-add auto-fixed files to staging
echo "${GREEN}‚úì Auto-fix completed${NC}"
echo "${BLUE}üì¶ Re-staging auto-fixed files...${NC}"
git add -u

# STEP 4: Verify no lint errors remain
echo
echo "${BLUE}üìã Step 4/7: Verifying lint status...${NC}"
pnpm lint

if [ $? -ne 0 ]; then
  echo
  echo "${RED}‚ùå Lint errors still exist after auto-fix!${NC}"
  echo "${YELLOW}üí° Some issues require manual fixes.${NC}"
  echo "${YELLOW}üí° Please review and fix the errors above.${NC}"
  exit 1
fi

echo "${GREEN}‚úì No lint errors${NC}"

# STEP 5: Type checking
echo
echo "${BLUE}‚ú® Step 5/7: Type checking...${NC}"
pnpm typecheck

if [ $? -ne 0 ]; then
  echo
  echo "${RED}‚ùå Type check failed!${NC}"
  echo "${YELLOW}üí° Fix type errors before committing.${NC}"
  exit 1
fi

echo "${GREEN}‚úì Type check passed${NC}"

# STEP 6: Build
echo
echo "${BLUE}üèóÔ∏è Step 6/7: Building...${NC}"
pnpm build > /dev/null 2>&1

if [ $? -ne 0 ]; then
  echo
  echo "${RED}‚ùå Build failed!${NC}"
  echo "${YELLOW}üí° Run 'pnpm build' to see build errors.${NC}"
  exit 1
fi

echo "${GREEN}‚úì Build successful${NC}"

# STEP 7: Validate GitHub Actions workflows (if actionlint is available)
echo
echo "${BLUE}‚öôÔ∏è Step 7/7: Validating GitHub Actions workflows...${NC}"

if command -v actionlint > /dev/null 2>&1; then
  if ./scripts/lint-workflows.sh > /dev/null 2>&1; then
    echo "${GREEN}‚úì Workflow validation passed${NC}"
  else
    echo
    echo "${YELLOW}‚ö†Ô∏è  Workflow validation found issues (non-blocking):${NC}"
    ./scripts/lint-workflows.sh || true  # Prevent exit code from failing the hook
    echo
    echo "${YELLOW}üí° Fix workflow errors when convenient.${NC}"
    echo "${YELLOW}üí° Run 'pnpm workflow:lint' to see details.${NC}"
  fi
else
  echo "${YELLOW}‚ö†Ô∏è  actionlint not installed (skipping)${NC}"
  echo "${YELLOW}üí° Install with: brew install actionlint${NC}"
fi

echo
echo "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
echo
