#!/usr/bin/env bash

# Modern Husky v9 - no need to source husky.sh anymore

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}"
echo

# STEP 1: Format code with Prettier
echo -e "${BLUE}‚ú® Step 1/7: Formatting code with Prettier...${NC}"
pnpm format > /dev/null 2>&1

if [ $? -ne 0 ]; then
  echo
  echo -e "${RED}‚ùå Prettier formatting failed!${NC}"
  echo -e "${YELLOW}üí° Run 'pnpm format' to see errors.${NC}"
  exit 1
fi

echo -e "${GREEN}‚úì Prettier formatting completed${NC}"
git add -u

# STEP 2: Lint and fix markdown
echo
echo -e "${BLUE}üìù Step 2/7: Linting markdown files...${NC}"
pnpm markdown:fix > /dev/null 2>&1

if [ $? -ne 0 ]; then
  echo
  echo -e "${YELLOW}‚ö†Ô∏è  Markdown linting found issues (attempting fix)${NC}"
  pnpm markdown:fix
fi

echo -e "${GREEN}‚úì Markdown linting completed${NC}"
git add -u

# STEP 3: Auto-fix linting issues
echo
echo -e "${BLUE}ÔøΩ Step 3/7: Linting and auto-fixing...${NC}"
pnpm lint:fix

# Check if auto-fix worked
if [ $? -ne 0 ]; then
  echo
  echo -e "${RED}‚ùå Lint auto-fix couldn't resolve all issues!${NC}"
  echo -e "${YELLOW}üí° Please fix the remaining errors manually.${NC}"
  echo -e "${YELLOW}üí° Run 'pnpm lint' to see all errors.${NC}"
  exit 1
fi

# Re-add auto-fixed files to staging
echo -e "${GREEN}‚úì Auto-fix completed${NC}"
echo -e "${BLUE}üì¶ Re-staging auto-fixed files...${NC}"
git add -u

# STEP 4: Verify no lint errors remain
echo
echo -e "${BLUE}üìã Step 4/7: Verifying lint status...${NC}"
pnpm lint

if [ $? -ne 0 ]; then
  echo
  echo -e "${RED}‚ùå Lint errors still exist after auto-fix!${NC}"
  echo -e "${YELLOW}üí° Some issues require manual fixes.${NC}"
  echo -e "${YELLOW}üí° Please review and fix the errors above.${NC}"
  exit 1
fi

echo -e "${GREEN}‚úì No lint errors${NC}"

# STEP 5: Type checking
echo
echo -e "${BLUE}ÔøΩ Step 5/7: Type checking...${NC}"
pnpm typecheck

if [ $? -ne 0 ]; then
  echo
  echo -e "${RED}‚ùå Type check failed!${NC}"
  echo -e "${YELLOW}üí° Fix type errors before committing.${NC}"
  exit 1
fi

echo -e "${GREEN}‚úì Type check passed${NC}"

# STEP 6: Build
echo
echo -e "${BLUE}üèóÔ∏è  Step 6/7: Building...${NC}"
pnpm build > /dev/null 2>&1

if [ $? -ne 0 ]; then
  echo
  echo -e "${RED}‚ùå Build failed!${NC}"
  echo -e "${YELLOW}üí° Run 'pnpm build' to see build errors.${NC}"
  exit 1
fi

echo -e "${GREEN}‚úì Build successful${NC}"

# STEP 7: Validate GitHub Actions workflows (if actionlint is available)
echo
echo -e "${BLUE}‚öôÔ∏è  Step 7/7: Validating GitHub Actions workflows...${NC}"

if command -v actionlint > /dev/null 2>&1; then
  if ./scripts/lint-workflows.sh > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì Workflow validation passed${NC}"
  else
    echo
    echo -e "${YELLOW}‚ö†Ô∏è  Workflow validation found issues (non-blocking):${NC}"
    ./scripts/lint-workflows.sh || true  # Prevent exit code from failing the hook
    echo
    echo -e "${YELLOW}üí° Fix workflow errors when convenient.${NC}"
    echo -e "${YELLOW}üí° Run 'pnpm workflow:lint' to see details.${NC}"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è  actionlint not installed (skipping)${NC}"
  echo -e "${YELLOW}üí° Install with: brew install actionlint${NC}"
fi

echo
echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
echo
